var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MyJuliaPackage","category":"page"},{"location":"#MyJuliaPackage","page":"Home","title":"MyJuliaPackage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MyJuliaPackage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MyJuliaPackage]","category":"page"},{"location":"#MyJuliaPackage.create_graph-Tuple{HashCode2014.City}","page":"Home","title":"MyJuliaPackage.create_graph","text":"Creates our own graph instance so that we don't have to recompute things so many times. :)\n\n\n\n\n\n","category":"method"},{"location":"#MyJuliaPackage.explorer_1d-Tuple{Any, Any, Any}","page":"Home","title":"MyJuliaPackage.explorer_1d","text":"Base case for the recursion explorer. Checks just the best distance/duration in the set of streets we haven't traversed. :)\n\n\n\n\n\n","category":"method"},{"location":"#MyJuliaPackage.explorer_nd-NTuple{5, Any}","page":"Home","title":"MyJuliaPackage.explorer_nd","text":"Explores arbitrary depth of the graph using recursion. Sums distance/duration to get the best overall speed. :)\n\n\n\n\n\n","category":"method"},{"location":"#MyJuliaPackage.gred-Tuple{HashCode2014.City}","page":"Home","title":"MyJuliaPackage.gred","text":"Greedy search approach to returning Solution. Uses depth forward search to determine a greedy choice. :)\n\n\n\n\n\n","category":"method"},{"location":"#MyJuliaPackage.lowest_dur_neighbor-Tuple{Any}","page":"Home","title":"MyJuliaPackage.lowest_dur_neighbor","text":"Returns the neighboring (end, duration, distance) tuple with the lowest duration. :)\n\n\n\n\n\n","category":"method"},{"location":"#MyJuliaPackage.total_distance-Tuple{Any, Any}","page":"Home","title":"MyJuliaPackage.total_distance","text":"Returns the total distance of an array of itineraries\n\n\n\n\n\n","category":"method"}]
}
